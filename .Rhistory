ybar <- c(110, 125, 140)  # 三次试验的均值
tau1 <- 1 / sqrt(1 / se ^ 2 + 1 / tau ^ 2)  # 后验分布方差
mu1 <- (ybar / se ^ 2 + mu / tau ^ 2) * tau1 ^ 2  # 后验分布均值
summ1 <- cbind(ybar, mu1, tau1)  # 比较先验和后验的均值
summ1
#The posterior density comparison plot given different values of x bar
par(mfrow=c(1,1))
curve(dnorm(x, mean=mu1[1],sd=tau1[1]),from=60,to=140,xlab="theta",ylab="Prior Density",lwd=1)
curve(dnorm(x, mean=mu1[2],sd=tau1),add=TRUE,lwd=2)
curve(dnorm(x, mean=mu1[3],sd=tau1),add=TRUE,lwd=3)
legend("topleft",legend=c("mean 110","mean 125","mean 140"),lwd=1:3)
# Compare two possible priors for mean:
tscale <- 20 / qt(0.95, 2)
tscale
par(mfrow=c(1, 1))
curve(1 / tscale * dt((x - mu) / tscale, 2),
from=60, to=140, xlab="theta",
ylab="Prior Density")
curve(dnorm(x, mean=mu, sd=tau), add=TRUE, lwd=3)
legend("topright", legend=c("t density",
"normal density"),
lwd=c(1,3))
norm.t.compute <- function(ybar){
theta <- seq(60, 180, length = 500)
like <- dnorm(theta, mean=ybar,
sd=sigma/sqrt(n))
prior <- dt((theta - mu) / tscale, 2)
post <- prior * like
post <- post / sum(post)
m <- sum(theta * post)
s <- sqrt(sum(theta ^ 2 * post) - m ^ 2)
c(ybar, m, s)
}
summ2 <- t(sapply(c(110, 125, 140),
norm.t.compute))
dimnames(summ2)[[2]] <- c("ybar", "mu1 t",
"tau1 t")
summ2
cbind(summ1, summ2)
#Compare two posterior densities:
theta <- seq(60, 180, length=500)
normpost <- dnorm(theta, mu1[3], tau1)
normpost <- normpost / sum(normpost)
plot(theta, normpost, type="l", lwd=3,
ylab="Posterior Density")
like <- dnorm(theta, mean=140, sd=sigma / sqrt(n))
prior <- dt((theta - mu) / tscale, 2)
tpost <- prior * like / sum(prior * like)
lines(theta, tpost)
legend("topright", legend=c("t prior",
"normal prior"),
lwd=c(1,3))
tscale <- 20 / qt(0.95, 2)
tscale
par(mfrow=c(1, 1))
curve(1 / tscale * dt((x - mu) / tscale, 2),
from=60, to=140, xlab="theta",
ylab="Prior Density")
curve(dnorm(x, mean=mu, sd=tau), add=TRUE, lwd=3)
legend("topright", legend=c("t density",
"normal density"),
lwd=c(1,3))
norm.t.compute <- function(ybar){
theta <- seq(60, 180, length = 500)
like <- dnorm(theta, mean=ybar,
sd=sigma/sqrt(n))
prior <- dt((theta - mu) / tscale, 2)
post <- prior * like
post <- post / sum(post)  # 连续posterior的贝叶斯公式
m <- sum(theta * post)    # posterior mean
s <- sqrt(sum(theta ^ 2 * post) - m ^ 2)  # posterior sd
c(ybar, m, s)
}
summ2 <- t(sapply(c(110, 125, 140),
norm.t.compute))
dimnames(summ2)[[2]] <- c("ybar", "mu1 t",
"tau1 t")
summ2
cbind(summ1, summ2)
#Compare two posterior densities:
theta <- seq(60, 180, length=500)
normpost <- dnorm(theta, mu1[3], tau1)
normpost <- normpost / sum(normpost)
plot(theta, normpost, type="l", lwd=3,
ylab="Posterior Density")
like <- dnorm(theta, mean=140, sd=sigma / sqrt(n))
prior <- dt((theta - mu) / tscale, 2)
tpost <- prior * like / sum(prior * like)
lines(theta, tpost)
legend("topright", legend=c("t prior",
"normal prior"),
lwd=c(1,3))
library(LearnBayes)
# Use a mixture of beta curves to reflect beliefs that a particular coin is biased.
# prior
curve(.5 * dbeta(x, 6, 14) + .5 * dbeta(x, 14, 6),
from=0, to=1, xlab="P", ylab="Density")
# prior parameters
probs <- c(.5, .5)
beta.par1 <- c(6, 14)
beta.par2 <- c(14, 6)
betapar <- rbind(beta.par1, beta.par2)
# sample data
data <- c(7, 3)
# posterior
post <- binomial.beta.mix(probs, betapar, data)
post
# Prior and posteriors for two hospitals:
par(mfrow = c(2, 1))
# prior hospital 1
plot(density(lambdaA), main="HOSPITAL A",
xlab="lambdaA", lwd=3)  # posterior
library(LearnBayes)
# Predictive density:
alpha <- 16; beta <- 15174  # prior
yobs <- 1; ex <- 66  # sample data from hospital 1
y <- 0:10
lam <- alpha / beta  # lambda*scale = #~Poisson
py <- dpois(y, lam * ex) *
dgamma(lam, shape = alpha, rate = beta) /
dgamma(lam, shape = alpha + y, rate = beta + ex)
# f(y) = f(y|lam)g(lam)/g(lam|y)
cbind(y, round(py, 3))
# Posterior density: 针对hospital 1
lambdaA <- rgamma(1000, shape = alpha + yobs,
rate = beta + ex)
# Posterior density: 针对hospital 2
lambdaB <- rgamma(1000, shape = alpha + yobs,
rate = beta + ex)
# Prior and posteriors for two hospitals:
par(mfrow = c(2, 1))
# prior hospital 1
plot(density(lambdaA), main="HOSPITAL A",
xlab="lambdaA", lwd=3)  # posterior
curve(dgamma(x, shape = alpha, rate = beta),
add=TRUE)  # prior
legend("topright",legend=c("prior","posterior"),
lwd=c(1,3))
# prior hospital 1
plot(density(lambdaB), main="HOSPITAL B",
xlab="lambdaB", lwd=3)  # posterior
curve(dgamma(x, shape = alpha, rate = beta),
add=TRUE)  # prior
legend("topright",legend=c("prior","posterior"),
lwd=c(1,3))
library(LearnBayes)
library(lattice)
data(marathontimes)
attach(marathontimes)
mycontour(normchi2post,
c(220, 330, 500, 9000),
marathontimes$time,
xlab="mean", ylab="variance")
marathontimes
View(marathontimes)
S <- with(marathontimes,
sum((time - mean(time))^2))
n <- length(marathontimes$time)  # sample size
sigma2 <- S / rchisq(10000, n - 1)
mu <- rnorm(10000, mean = mean(marathontimes$time),
sd = sqrt(sigma2) / sqrt(n))
mycontour(normchi2post,
c(220, 330, 500, 9000),
marathontimes$time,
xlab="mean", ylab="variance")
points(mu, sigma2)
library(LearnBayes)
library(lattice)
data(marathontimes)
attach(marathontimes)
mycontour(normchi2post,
c(220, 330, 500, 9000),
marathontimes$time,
xlab="mean", ylab="variance")
# summarize this posterior distribution by simulation
S <- with(marathontimes,
sum((time - mean(time))^2))
n <- length(marathontimes$time)  # sample size
sigma2 <- S / rchisq(10000, n - 1)  # posterior sd
mu <- rnorm(10000, mean = mean(marathontimes$time),
sd = sqrt(sigma2) / sqrt(n))  # posterior mean
mycontour(normchi2post,
c(220, 330, 500, 9000),
marathontimes$time,
xlab="mean", ylab="variance")
points(mu, sigma2)
# 95% credible interval for mean and standard deviation
quantile(mu, c(0.025, 0.975))
quantile(sqrt(sigma2), c(0.025, 0.975))
# The posterior distributution of mu
# calculate by hand
y_m = mean(time)
s = sd(time)
curve(dt((x-y_m)/(s/sqrt(n)),n-1), from=200, to=350, xlab="mu", ylab="p(mu|y)", lwd=2, col="red")
y_m
s
s^2/n
sqrt(s^2/n)
qt(0.975,df=19)
curve(dt((x-y_m)/(s/sqrt(n)),n-1), from=200, to=350, xlab="mu", ylab="p(mu|y)", lwd=2, col="red")
mu <- rnorm(10000, mean = mean(marathontimes$time),
sd = sqrt(sigma2) / sqrt(n))  # posterior mean
mu
mycontour(logisticpost, c(-3, 3, -1, 9), data.new,
xlab="beta0", ylab="beta1")
a1=rbeta(10000,295,308)
a2=rbeta(10000,289,333)
diff=a2-a1
hist(diff)
uc=rnorm(10000,0.9854,0.0017)
ut=rnorm(10000,1.1413,0.0011)
diff=ut-uc
hist(diff)
upper=qnorm(0.975,0.1559,sqrt(0.0028))
lower=0.1559-(upper-0.1559)
upper
lower
sessionInfo()
library(formatR)
install.packages("formatR")
library(formatR)
install.packages("styler")
# 或者
# install.packages("remotes")
remotes::install_github("r-lib/styler")
styler:::set_style_transformers()
styler:::set_style_transformers()
styler:::set_style_transformers()
styler:::set_style_transformers()
styler:::style_active_file()
styler:::style_active_file()
styler:::style_active_file()
foo(3,2,0)
a <- 2
a
b <- 1 / a
b
foo <- function(x, y, k = 0.5) {
x * cos(y - k)
}
foo(3,2)
foo(3,2,0)
styler:::style_active_file()
a <- 2
a
b <- 1 / a
b
foo <- function(x, y, k = 0.5) {
x * cos(y - k)
}
foo(3, 2)
foo(3, 2, 0)
a <- 1 + 2 + 3
+4 + 5
a
a <- 1 + 2 + 3 + 4 + 5
a
styler:::style_active_file()
a <- 2
a
b <- 1 / a
b
foo <- function(x, y, k = 0.5) {
x * cos(y - k)
}
foo(3, 2)
foo(3, 2, 0)
a <- 1 + 2 + 3
+4 + 5
a
a <- 1 + 2 + 3 + 4 + 5
a
a <- 2; b <- 1; d <- log(b)
q("no")
help debug
? debug
options(repos=c("https://markbravington.github.io/Rmvb-repo",
getOption( "repos")))
install.packages("mvbutils")
install.packages("debug")
installed.packages("tcltk")
options(repos=c("https://markbravington.github.io/Rmvb-repo",
getOption( "repos")))
options(repos=c("https://markbravington.github.io/Rmvb-repo",
getOption( "repos")))
install.packages("debug")
install.packages("debug")
install.packages("debug")
install.packages("debug", repos = "https://cloud.r-project.org/")
install.packages("debugme")
install.packages("Xquartz")
options(repos=c("https://markbravington.github.io/Rmvb-repo",
getOption( "repos")))
install.packages("mvbutils")
install.packages("debug")
vision
R.version.string
options(repos=c("https://markbravington.github.io/Rmvb-repo",
getOption( "repos")))
install.packages("mvbutils")
install.packages("debug")
library(debug)
install.packages("tcltk")
install.packages("tcltk")
library(debug)
library(tcltk)
library(debug)
update.packages(ask = FALSE, checkBuilt = TRUE)
tinytex::reinstall_tinytex()
update.packages(ask = FALSE, checkBuilt = TRUE)
tinytex::tlmgr_update()
# CRAN version
install.packages('tinytex')
install.packages("tinytex")
update.packages(ask = FALSE, checkBuilt = TRUE)
update.packages(ask = FALSE, checkBuilt = TRUE)
library(gfortan)
install.packages("gfortan")
R.version.string
knitr::opts_chunk$set(echo = TRUE)
summary(cars)
install.packages('tinytex')
library(tinytex)
tlmgr_install('framed')
install_tinytex()
remove.packages("rmarkdown")
a3d <- c(TRUE, FALSE, FALSE)
class(a3d)
install.packages("styler")
# 或者
# install.packages("remotes")
remotes::install_github("r-lib/styler")
remotes::install_github("r-lib/styler")
styler:::style_active_file()
styler:::style_active_file()
styler:::style_active_file()
styler:::style_active_file()
help runif
help.runif
? runif
# Exercise
set.seed(5); n <- 2000
w <- runif(n)
A <- matrix(runif(n*n),n,n)
A
View(A)
runif(n*n)
B <- matrix(1:6,2,3); B ## create a matrix (filled by col)
B
# Exercise
set.seed(5); n <- 5
w <- runif(n)
w
A <- matrix(runif(n*n),n,n)
A <- matrix(runif(n*n),n,n)
system.time(B <- diag(w) %*% A )
A
diag(w)
?diag
diag(w) %*% A
w * A
styler:::style_active_file()
stuff <- list(a=1:6,txt="furin cleavage site",l2 = function(x) log(x^2),
+ more = list(a="er",b=42))
styler:::style_active_file()
styler:::style_active_file()
stuff
stuff <- list(a = 1:6, txt = "furin cleavage site", l2 = function(x) log(x^2), more = list(a = "er", b = 42))
stuff
stuff[[1]]
stuff[['a']]
stuff[['more']]
stuff[['more']]$a
stuff[1]
stuff[[1]]
stuff[['a']]
stuff$a
stuff[['more']]
stuff[['more']]$a
stuff[["l2"]]
stuff[c(1,2)]
stuff[1]
stuff[[1]]
type(c(stuff$a, stuff[1]))
typeof(c(stuff$a, stuff[1]))
typeof(stuff$a)
class(stuff[1])
stuff['more']$more
stuff[['more']][1]
stuff[['more']]['a']
# 5.2.2 Matrices and arrays
a <- array(1:24, c(3, 2, 4))
a
d <- dim(a) ## get the ’dim’ attribute
d
d[1]
B <- matrix(1:6, 2, 3)
B ## create a matrix (filled by col)  matrix(elements, rows, columns)
B[1, 2] <- -1 ## change element 1,2
B %*% a ## matrix multiplication
B * a ## element wise multiplication with recycling!!
a <- c(.3, -1.2, 2.3) ## a 3-vector
B %*% a ## matrix multiplication
B * a ## element wise multiplication with recycling!!
B
a
B <- matrix(1:6, 2, 3)
B
? matrix
B <- matrix(1:6, 2, 3)
B
matrix(1:6, 2, 3, byrow=T)
class(fac)
fac <- factor(c("fred","sue","sue","bill","fred"))
class(fac)
fac
# DF
dat <- data.frame(y = c(.3,.7,1.2),x = 1:3,fac = factor(c("a","b","a")))
dat
View(dat)
dim(dat)
dim$fac
styler:::style_active_file()
# Exericses
a <- factor(sample(c("fred","george","sue","ann"),20,replace=TRUE)); a
b <- factor(a, levels = c("ann","sue","fred","george")); b
al <- levels(a)
al
bl <- levels((b))
bl
bl <- levels(b); bl
styler:::style_active_file()
styler:::style_active_file()
styler:::style_active_file()
# Time & Date
## create date-time data (format is actually default here)
d <- as.POSIXct(c(
"2016-06-28 21:30:00", "2016-06-29 22:00:00",
+"2016-06-30 22:30:00"
), format = "%Y-%m-%d %H:%M:%S")
# Time & Date
## create date-time data (format is actually default here)
d <- as.POSIXct(c("2016-06-28 21:30:00","2016-06-29 22:00:00",
+ "2016-06-30 22:30:00"),format="%Y-%m-%d %H:%M:%S")
? POSIXct
install.packages("DateTimeClasses")
?
DateTimeClasses
?DateTimeClasses
styler:::style_active_file()
# Time & Date
## create date-time data (format is actually default here)
d <- as.POSIXct(c(
"2016-06-28 21:30:00", "2016-06-29 22:00:00",
+"2016-06-30 22:30:00"
), format = "%Y-%m-%d %H:%M:%S")
styler:::style_active_file()
styler:::style_active_file()
# Time & Date
## create date-time data (format is actually default here)
d <- as.POSIXct(c(
"2016-06-28 21:30:00", "2016-06-29 22:00:00", "2016-06-30 22:30:00"
), format = "%Y-%m-%d %H:%M:%S")
julian(d, origin = as.Date("2016-01-01")) ## get day since Jan 1 2016
attr(, "origin")
?attr
attr(d, "origin")
attr(julian, "origin")
julian(d, origin = as.Date("2016-01-01")) ## get day since Jan 1 2016
# Time & Date
## create date-time data (format is actually default here)
d <- as.POSIXct(c(
"2016-06-28 21:30:00", "2016-06-29 22:00:00", "2016-06-30 22:30:00"
), format = "%Y-%m-%d %H:%M:%S")
julian(d, origin = as.Date("2016-01-01")) ## get day since Jan 1 2016
format(d, "%T") ## extract times as text
as.Date(d) ## get dates as class ’Date’
setwd("/Users/l/Desktop/Edinburgh/Extended_Statistical_Programming/ESP_coursework") ## comment out of submitted
a <- scan("4300-0.txt",what="character",skip=73,nlines=32858-73)
a <- gsub("_(","",a,fixed=TRUE) ## remove "_("
setwd("/Users/l/Desktop/Edinburgh/Extended_Statistical_Programming/ESP_coursework") ## comment out of submitted
a <- scan("4300-0.txt",what="character",skip=73,nlines=32858-73)
a <- gsub("_(","",a,fixed=TRUE) ## remove "_("
a <- scan("The Project Gutenberg eBook of Ulysses.txt",what="character",skip=73,nlines=32858-73)
setwd("/Users/l/Desktop/Edinburgh/Extended_Statistical_Programming/ESP_coursework") ## comment out of submitted
a <- scan("The Project Gutenberg eBook of Ulysses.txt",what="character",skip=73,nlines=32858-73)
a <- gsub("_(","",a,fixed=TRUE) ## remove "_("
a
View(a)
styler:::style_active_file()
# 5.3 Attributes
attributes(PlantGrowth) ## PlantGrowth is an R data set
A <- matrix(1:6,2,3) ## create a matrix
attributes(A) ## check its attributes
attr(A,"dim") ## query attibute
attr(A,"foo") <- list(1:3,"fred") ## create or reset attribute
A
attributes(A)
# 5.3.1 str and object structure
str(dat)
# 5.3.1 str and object structure
dat <- data.frame(y = c(.3,.7,1.2),x = 1:3,fac = factor(c("a","b","a")))
str(dat)
styler:::style_active_file()
# 5.4
x <- c(3, 2, 1, 0, 4, 5, 2)
x[(x < 2 & x > 1) | x < -2] <- 0
x
# 5.4
x <- c(3, 2, 1, 0, -4, -5, 2, 1.5)
x[(x < 2 & x > 1) | x < -2] <- 0
x
